// <auto-generated />
using System;
using CityLibraryDomain.ContextRelated;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CityLibraryDomain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230108113159_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("CityLibraryInfrastructure.Entities.ActiveBookReservations", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ReservationId");

                    b.HasIndex("BookId");

                    b.HasIndex("MemberId");

                    b.ToTable("ActiveBookReservations");

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 618, DateTimeKind.Local).AddTicks(9890),
                            MemberId = "User2",
                            ReturnDate = new DateTime(2023, 1, 4, 14, 31, 59, 618, DateTimeKind.Local).AddTicks(9830)
                        },
                        new
                        {
                            ReservationId = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 618, DateTimeKind.Local).AddTicks(9930),
                            MemberId = "User2",
                            ReturnDate = new DateTime(2023, 1, 6, 14, 31, 59, 618, DateTimeKind.Local).AddTicks(9920)
                        },
                        new
                        {
                            ReservationId = 3,
                            BookId = 2,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 618, DateTimeKind.Local).AddTicks(9930),
                            MemberId = "User1",
                            ReturnDate = new DateTime(2023, 1, 2, 14, 31, 59, 618, DateTimeKind.Local).AddTicks(9930)
                        },
                        new
                        {
                            ReservationId = 4,
                            BookId = 11,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 618, DateTimeKind.Local).AddTicks(9930),
                            MemberId = "User5",
                            ReturnDate = new DateTime(2023, 1, 3, 14, 31, 59, 618, DateTimeKind.Local).AddTicks(9930)
                        },
                        new
                        {
                            ReservationId = 5,
                            BookId = 6,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 618, DateTimeKind.Local).AddTicks(9940),
                            MemberId = "User5",
                            ReturnDate = new DateTime(2023, 1, 3, 14, 31, 59, 618, DateTimeKind.Local).AddTicks(9940)
                        },
                        new
                        {
                            ReservationId = 6,
                            BookId = 6,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 618, DateTimeKind.Local).AddTicks(9940),
                            MemberId = "User4",
                            ReturnDate = new DateTime(2023, 1, 3, 14, 31, 59, 618, DateTimeKind.Local).AddTicks(9940)
                        });
                });

            modelBuilder.Entity("CityLibraryInfrastructure.Entities.BookReservationHistories", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecievedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.HasKey("HistoryId");

                    b.HasIndex("BookId");

                    b.HasIndex("MemberId");

                    b.ToTable("BookReservationHistory");

                    b.HasData(
                        new
                        {
                            HistoryId = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(600),
                            MemberId = "User3",
                            RecievedDate = new DateTime(2022, 12, 19, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(600),
                            ReturnDate = new DateTime(2022, 11, 29, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(590)
                        },
                        new
                        {
                            HistoryId = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(600),
                            MemberId = "User3",
                            RecievedDate = new DateTime(2023, 1, 5, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(600),
                            ReturnDate = new DateTime(2022, 12, 27, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(600)
                        },
                        new
                        {
                            HistoryId = 3,
                            BookId = 5,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(610),
                            MemberId = "User1",
                            RecievedDate = new DateTime(2022, 12, 26, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(600),
                            ReturnDate = new DateTime(2022, 12, 17, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(600)
                        },
                        new
                        {
                            HistoryId = 4,
                            BookId = 5,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(610),
                            MemberId = "User2",
                            RecievedDate = new DateTime(2022, 9, 30, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(610),
                            ReturnDate = new DateTime(2022, 9, 10, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(610)
                        },
                        new
                        {
                            HistoryId = 5,
                            BookId = 5,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(610),
                            MemberId = "User6",
                            RecievedDate = new DateTime(2022, 11, 29, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(610),
                            ReturnDate = new DateTime(2022, 11, 22, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(610)
                        },
                        new
                        {
                            HistoryId = 6,
                            BookId = 7,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(620),
                            MemberId = "User7",
                            RecievedDate = new DateTime(2022, 12, 9, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(620),
                            ReturnDate = new DateTime(2022, 12, 2, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(620)
                        },
                        new
                        {
                            HistoryId = 7,
                            BookId = 7,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(620),
                            MemberId = "User9",
                            RecievedDate = new DateTime(2022, 12, 19, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(620),
                            ReturnDate = new DateTime(2022, 12, 12, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(620)
                        },
                        new
                        {
                            HistoryId = 8,
                            BookId = 18,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(630),
                            MemberId = "User10",
                            RecievedDate = new DateTime(2022, 12, 29, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(630),
                            ReturnDate = new DateTime(2022, 12, 22, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(620)
                        });
                });

            modelBuilder.Entity("CityLibraryInfrastructure.Entities.Books", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<short>("AvailableCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("CoverType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EditionDate")
                        .HasColumnType("TEXT");

                    b.Property<short>("EditionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FirstPublishDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<short>("ReservedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TitleType")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Friedrich Engels",
                            AvailableCount = (short)3,
                            BookTitle = "Ailenin, Devletin ve Özel Mülkiyetin Kökeni",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(730),
                            EditionDate = new DateTime(1903, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(720),
                            EditionNumber = (short)4,
                            FirstPublishDate = new DateTime(1885, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(720),
                            ReservedCount = (short)1,
                            TitleType = 7
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Ahmet Ümit",
                            AvailableCount = (short)4,
                            BookTitle = "Beyoğlu Rapsodisi",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(730),
                            EditionDate = new DateTime(2018, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(730),
                            EditionNumber = (short)4,
                            FirstPublishDate = new DateTime(2004, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(730),
                            ReservedCount = (short)2,
                            TitleType = 1
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Ahmet Ümit",
                            AvailableCount = (short)3,
                            BookTitle = "Beyoğlu Rapsodisi",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(740),
                            EditionDate = new DateTime(2013, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(730),
                            EditionNumber = (short)3,
                            FirstPublishDate = new DateTime(2004, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(730),
                            ReservedCount = (short)0,
                            TitleType = 1
                        },
                        new
                        {
                            BookId = 4,
                            Author = "George Brinton Thomas",
                            AvailableCount = (short)500,
                            BookTitle = "Thomas' Calculus",
                            CoverType = 0,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(750),
                            EditionDate = new DateTime(2018, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(740),
                            EditionNumber = (short)13,
                            FirstPublishDate = new DateTime(1953, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(740),
                            ReservedCount = (short)0,
                            TitleType = 2
                        },
                        new
                        {
                            BookId = 5,
                            Author = "George Brinton Thomas",
                            AvailableCount = (short)50,
                            BookTitle = "Thomas' Calculus",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(750),
                            EditionDate = new DateTime(2018, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(750),
                            EditionNumber = (short)13,
                            FirstPublishDate = new DateTime(1953, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(750),
                            ReservedCount = (short)0,
                            TitleType = 2
                        },
                        new
                        {
                            BookId = 6,
                            Author = "Karl Marx & Friedrich Engels",
                            AvailableCount = (short)3,
                            BookTitle = "Die Heilige Familie",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(750),
                            EditionDate = new DateTime(1845, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(750),
                            EditionNumber = (short)1,
                            FirstPublishDate = new DateTime(1845, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(750),
                            ReservedCount = (short)1,
                            TitleType = 7
                        },
                        new
                        {
                            BookId = 7,
                            Author = "Karl Marx & Friedrich Engels",
                            AvailableCount = (short)300,
                            BookTitle = "Die Heilige Familie",
                            CoverType = 0,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(760),
                            EditionDate = new DateTime(1845, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(760),
                            EditionNumber = (short)1,
                            FirstPublishDate = new DateTime(1845, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(760),
                            ReservedCount = (short)0,
                            TitleType = 7
                        },
                        new
                        {
                            BookId = 8,
                            Author = "Julio Cortazar",
                            AvailableCount = (short)6,
                            BookTitle = "Oyunun Sonu",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(760),
                            EditionDate = new DateTime(2020, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(760),
                            EditionNumber = (short)2,
                            FirstPublishDate = new DateTime(1956, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(760),
                            ReservedCount = (short)0,
                            TitleType = 1
                        },
                        new
                        {
                            BookId = 9,
                            Author = "Marjin Haverbeke",
                            AvailableCount = (short)2,
                            BookTitle = "Eloquent Javascript",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(770),
                            EditionDate = new DateTime(2018, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(770),
                            EditionNumber = (short)3,
                            FirstPublishDate = new DateTime(2017, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(770),
                            ReservedCount = (short)0,
                            TitleType = 5
                        },
                        new
                        {
                            BookId = 10,
                            Author = "Marjin Haverbeke",
                            AvailableCount = (short)450,
                            BookTitle = "Eloquent Javascript",
                            CoverType = 0,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(780),
                            EditionDate = new DateTime(2018, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(770),
                            EditionNumber = (short)3,
                            FirstPublishDate = new DateTime(2017, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(770),
                            ReservedCount = (short)0,
                            TitleType = 5
                        },
                        new
                        {
                            BookId = 11,
                            Author = "Zülfü Livaneli",
                            AvailableCount = (short)4,
                            BookTitle = "Bir Kedi, Bir Adam, Bir Ölüm",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(780),
                            EditionDate = new DateTime(2001, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(780),
                            EditionNumber = (short)1,
                            FirstPublishDate = new DateTime(2001, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(780),
                            ReservedCount = (short)1,
                            TitleType = 1
                        },
                        new
                        {
                            BookId = 12,
                            Author = "Georges Politzer",
                            AvailableCount = (short)9,
                            BookTitle = "Principes élémentaires de Philosophie",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(790),
                            EditionDate = new DateTime(1945, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(780),
                            EditionNumber = (short)1,
                            FirstPublishDate = new DateTime(1945, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(780),
                            ReservedCount = (short)0,
                            TitleType = 7
                        },
                        new
                        {
                            BookId = 13,
                            Author = "Georges Politzer",
                            AvailableCount = (short)350,
                            BookTitle = "Principes élémentaires de Philosophie",
                            CoverType = 0,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(790),
                            EditionDate = new DateTime(1945, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(790),
                            EditionNumber = (short)1,
                            FirstPublishDate = new DateTime(1945, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(790),
                            ReservedCount = (short)0,
                            TitleType = 7
                        },
                        new
                        {
                            BookId = 14,
                            Author = "Ferdinand Pierre Beer & Elwood Russell Johnston Jr.",
                            AvailableCount = (short)3,
                            BookTitle = "Mechanics of Materials",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(800),
                            EditionDate = new DateTime(1981, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(790),
                            EditionNumber = (short)1,
                            FirstPublishDate = new DateTime(1981, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(790),
                            ReservedCount = (short)0,
                            TitleType = 3
                        },
                        new
                        {
                            BookId = 15,
                            Author = "Ferdinand Pierre Beer & Elwood Russell Johnston Jr.",
                            AvailableCount = (short)300,
                            BookTitle = "Mechanics of Materials",
                            CoverType = 0,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(800),
                            EditionDate = new DateTime(1981, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(800),
                            EditionNumber = (short)1,
                            FirstPublishDate = new DateTime(1981, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(800),
                            ReservedCount = (short)0,
                            TitleType = 3
                        },
                        new
                        {
                            BookId = 16,
                            Author = "Zülfü Livaneli",
                            AvailableCount = (short)11,
                            BookTitle = "Kardeşimin Hikayesi",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(810),
                            EditionDate = new DateTime(2013, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(810),
                            EditionNumber = (short)1,
                            FirstPublishDate = new DateTime(2013, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(810),
                            ReservedCount = (short)0,
                            TitleType = 1
                        },
                        new
                        {
                            BookId = 17,
                            Author = "Pierre Louÿs",
                            AvailableCount = (short)1,
                            BookTitle = "La Femme et le Pantin",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(820),
                            EditionDate = new DateTime(1898, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(810),
                            EditionNumber = (short)1,
                            FirstPublishDate = new DateTime(1898, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(810),
                            ReservedCount = (short)0,
                            TitleType = 1
                        },
                        new
                        {
                            BookId = 18,
                            Author = "Stephen King",
                            AvailableCount = (short)4,
                            BookTitle = "Sadist",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(820),
                            EditionDate = new DateTime(1995, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(820),
                            EditionNumber = (short)2,
                            FirstPublishDate = new DateTime(1987, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(820),
                            ReservedCount = (short)1,
                            TitleType = 1
                        },
                        new
                        {
                            BookId = 19,
                            Author = "Yaşar Nuri Öztürk",
                            AvailableCount = (short)2,
                            BookTitle = "Allah ile Aldatmak",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(830),
                            EditionDate = new DateTime(2014, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(820),
                            EditionNumber = (short)1,
                            FirstPublishDate = new DateTime(2014, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(820),
                            ReservedCount = (short)0,
                            TitleType = 6
                        },
                        new
                        {
                            BookId = 20,
                            Author = "Herbert George Wells",
                            AvailableCount = (short)1,
                            BookTitle = "The Invisible Man",
                            CoverType = 1,
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(830),
                            EditionDate = new DateTime(1897, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(830),
                            EditionNumber = (short)1,
                            FirstPublishDate = new DateTime(1897, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(830),
                            ReservedCount = (short)0,
                            TitleType = 6
                        });
                });

            modelBuilder.Entity("CityLibraryInfrastructure.Entities.MemberRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("RoleId");

                    b.ToTable("MemberRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(1280),
                            MemberId = "Admin",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(1280),
                            MemberId = "Admin",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(1330),
                            MemberId = "User1",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(1330),
                            MemberId = "User2",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(1330),
                            MemberId = "User3",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(1340),
                            MemberId = "User4",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(1340),
                            MemberId = "User5",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(1340),
                            MemberId = "User6",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(1340),
                            MemberId = "User7",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(1340),
                            MemberId = "User8",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(1350),
                            MemberId = "User9",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 619, DateTimeKind.Local).AddTicks(1350),
                            MemberId = "User10",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("CityLibraryInfrastructure.Entities.Members", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserName");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            UserName = "Admin",
                            Address = "Admin's Address",
                            BirthDate = new DateTime(1993, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5750),
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5830),
                            FullName = "Admin",
                            Password = "$2a$11$PPGxji8hhRUWqeNzNk437.Gp3m.tNyRihy3hHjbVLz6jvpnb42Zr."
                        },
                        new
                        {
                            UserName = "User1",
                            Address = "Orhan's Address",
                            BirthDate = new DateTime(1993, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5830),
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5830),
                            FullName = "Orhan",
                            Password = "$2a$11$PPGxji8hhRUWqeNzNk437.Gp3m.tNyRihy3hHjbVLz6jvpnb42Zr."
                        },
                        new
                        {
                            UserName = "User2",
                            Address = "Kaya's Address",
                            BirthDate = new DateTime(1983, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5840),
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5840),
                            FullName = "Kaya",
                            Password = "$2a$11$PPGxji8hhRUWqeNzNk437.Gp3m.tNyRihy3hHjbVLz6jvpnb42Zr."
                        },
                        new
                        {
                            UserName = "User3",
                            Address = "Kadriye's Address",
                            BirthDate = new DateTime(2003, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5840),
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5840),
                            FullName = "Kadriye",
                            Password = "$2a$11$PPGxji8hhRUWqeNzNk437.Gp3m.tNyRihy3hHjbVLz6jvpnb42Zr."
                        },
                        new
                        {
                            UserName = "User4",
                            Address = "Zuşer's Address",
                            BirthDate = new DateTime(1993, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5840),
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5850),
                            FullName = "Zuşer",
                            Password = "$2a$11$PPGxji8hhRUWqeNzNk437.Gp3m.tNyRihy3hHjbVLz6jvpnb42Zr."
                        },
                        new
                        {
                            UserName = "User5",
                            Address = "Devran's Address",
                            BirthDate = new DateTime(2001, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5850),
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5850),
                            FullName = "Devran",
                            Password = "$2a$11$PPGxji8hhRUWqeNzNk437.Gp3m.tNyRihy3hHjbVLz6jvpnb42Zr."
                        },
                        new
                        {
                            UserName = "User6",
                            Address = "Viladimir's Address",
                            BirthDate = new DateTime(1968, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5850),
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5860),
                            FullName = "Viladimir",
                            Password = "$2a$11$PPGxji8hhRUWqeNzNk437.Gp3m.tNyRihy3hHjbVLz6jvpnb42Zr."
                        },
                        new
                        {
                            UserName = "User7",
                            Address = "Fidel's Address",
                            BirthDate = new DateTime(1934, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5860),
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5870),
                            FullName = "Fidel",
                            Password = "$2a$11$PPGxji8hhRUWqeNzNk437.Gp3m.tNyRihy3hHjbVLz6jvpnb42Zr."
                        },
                        new
                        {
                            UserName = "User8",
                            Address = "Hasan's Address",
                            BirthDate = new DateTime(1963, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5870),
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5870),
                            FullName = "Hasan",
                            Password = "$2a$11$PPGxji8hhRUWqeNzNk437.Gp3m.tNyRihy3hHjbVLz6jvpnb42Zr."
                        },
                        new
                        {
                            UserName = "User9",
                            Address = "Behice's Address",
                            BirthDate = new DateTime(1963, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5870),
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5870),
                            FullName = "Behice",
                            Password = "$2a$11$PPGxji8hhRUWqeNzNk437.Gp3m.tNyRihy3hHjbVLz6jvpnb42Zr."
                        },
                        new
                        {
                            UserName = "User10",
                            Address = "Clara's Address",
                            BirthDate = new DateTime(1953, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5880),
                            CreatedAt = new DateTime(2022, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(5880),
                            FullName = "Clara",
                            Password = "$2a$11$PPGxji8hhRUWqeNzNk437.Gp3m.tNyRihy3hHjbVLz6jvpnb42Zr."
                        });
                });

            modelBuilder.Entity("CityLibraryInfrastructure.Entities.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(6880),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTime(2023, 1, 8, 14, 31, 59, 827, DateTimeKind.Local).AddTicks(6880),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("CityLibraryInfrastructure.Entities.ActiveBookReservations", b =>
                {
                    b.HasOne("CityLibraryInfrastructure.Entities.Books", "Book")
                        .WithMany("ActiveBookReservations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CityLibraryInfrastructure.Entities.Members", "Member")
                        .WithMany("ActiveBookReservations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("CityLibraryInfrastructure.Entities.BookReservationHistories", b =>
                {
                    b.HasOne("CityLibraryInfrastructure.Entities.Books", "Book")
                        .WithMany("BookReservationHistories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CityLibraryInfrastructure.Entities.Members", "Member")
                        .WithMany("BookReservationHistories")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("CityLibraryInfrastructure.Entities.MemberRoles", b =>
                {
                    b.HasOne("CityLibraryInfrastructure.Entities.Members", "Member")
                        .WithMany("MemberRoles")
                        .HasForeignKey("MemberId");

                    b.HasOne("CityLibraryInfrastructure.Entities.Roles", "Role")
                        .WithMany("MemberRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CityLibraryInfrastructure.Entities.Books", b =>
                {
                    b.Navigation("ActiveBookReservations");

                    b.Navigation("BookReservationHistories");
                });

            modelBuilder.Entity("CityLibraryInfrastructure.Entities.Members", b =>
                {
                    b.Navigation("ActiveBookReservations");

                    b.Navigation("BookReservationHistories");

                    b.Navigation("MemberRoles");
                });

            modelBuilder.Entity("CityLibraryInfrastructure.Entities.Roles", b =>
                {
                    b.Navigation("MemberRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
